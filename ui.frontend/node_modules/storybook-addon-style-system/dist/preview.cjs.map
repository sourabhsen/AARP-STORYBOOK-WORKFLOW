{"version":3,"sources":["../src/constants.ts","../src/withGlobals.ts","../src/withRoundTrip.ts","../src/preview.ts"],"names":["ADDON_ID","TOOL_ID","PANEL_ID","TAB_ID","PARAM_KEY","EVENTS","useEffect","useGlobals","withGlobals","StoryFn","context","globals","myAddon","isInDocs","theme","selector","useChannel","withRoundTrip","storyFn","emit","preview","preview_default"],"mappings":"AAAO,IAAMA,EAAW,yBACXC,EAAU,GAAGD,CAAQ,QACrBE,EAAW,GAAGF,CAAQ,SACtBG,EAAS,GAAGH,CAAQ,OACpBI,EAAY,mBAEZC,EAAS,CACpB,OAAQ,GAAGL,CAAQ,UACnB,QAAS,GAAGA,CAAQ,WACpB,MAAO,GAAGA,CAAQ,SAClB,OAAQ,GAAGA,CAAQ,SACrB,ECNA,OAAS,aAAAM,EAAW,cAAAC,MAAkB,yBAG/B,IAAMC,EAAc,CACzBC,EACAC,IACG,CACH,GAAM,CAACC,CAAO,EAAIJ,EAAW,EACvBK,EAAUD,EAAQP,CAAS,EAE3BS,EAAWH,EAAQ,WAAa,OAChC,CAAE,MAAAI,CAAM,EAAIJ,EAAQ,QAE1B,OAAAJ,EAAU,IAAM,CAGd,IAAMS,EAAWF,EACb,YAAYH,EAAQ,EAAE,aACtB,iBACN,EAAG,CAACE,EAASE,CAAK,CAAC,EAEZL,EAAQ,CACjB,EC3BA,OAAS,cAAAO,MAAkB,yBAQpB,IAAMC,EAAiBC,GAAqC,CACjE,IAAMC,EAAOH,EAAW,CACtB,CAACX,EAAO,OAAO,EAAG,IAAM,CACtBc,EAAKd,EAAO,OAAQ,CAClB,SAAS,CAAC,CACZ,CAAC,CACH,EACA,CAACA,EAAO,MAAM,EAAG,IAAM,CAIvB,EACA,CAACA,EAAO,KAAK,EAAG,IAAM,CACpBc,EAAKd,EAAO,OAAQ,CAClB,SAAS,CAAC,CACZ,CAAC,CACH,CACF,CAAC,EAED,OAAOa,EAAQ,CACjB,ECRA,IAAME,EAAwC,CAC5C,WAAY,CAACZ,EAAaS,CAAa,EACvC,QAAS,CACP,CAACb,CAAS,EAAG,EACf,CACF,EAEOiB,EAAQD","sourcesContent":["export const ADDON_ID = \"storybook/style-system\";\nexport const TOOL_ID = `${ADDON_ID}/tool`;\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const TAB_ID = `${ADDON_ID}/tab`;\nexport const PARAM_KEY = `myAddonParameter`;\n\nexport const EVENTS = {\n  RESULT: `${ADDON_ID}/result`,\n  REQUEST: `${ADDON_ID}/request`,\n  CLEAR: `${ADDON_ID}/clear`,\n  CHANGE: `${ADDON_ID}/change`,\n};\n","import type {\n  Renderer,\n  PartialStoryFn as StoryFunction,\n  StoryContext,\n} from \"@storybook/types\";\nimport { useEffect, useGlobals } from \"@storybook/preview-api\";\nimport { PARAM_KEY } from \"./constants\";\n\nexport const withGlobals = (\n  StoryFn: StoryFunction<Renderer>,\n  context: StoryContext<Renderer>\n) => {\n  const [globals] = useGlobals();\n  const myAddon = globals[PARAM_KEY];\n  // Is the addon being used in the docs panel\n  const isInDocs = context.viewMode === \"docs\";\n  const { theme } = context.globals;\n\n  useEffect(() => {\n    // Execute your side effect here\n    // For example, to manipulate the contents of the preview\n    const selector = isInDocs\n      ? `#anchor--${context.id} .sb-story`\n      : \"#storybook-root\";\n  }, [myAddon, theme]);\n\n  return StoryFn();\n};\n\n","import { useChannel } from \"@storybook/preview-api\";\nimport type {\n  Renderer,\n  PartialStoryFn as StoryFunction,\n} from \"@storybook/types\";\nimport { STORY_CHANGED } from \"@storybook/core-events\";\nimport { EVENTS } from \"./constants\";\n\nexport const withRoundTrip = (storyFn: StoryFunction<Renderer>) => {\n  const emit = useChannel({\n    [EVENTS.REQUEST]: () => {\n      emit(EVENTS.RESULT, {\n        cssClass:[]\n      });\n    },\n    [EVENTS.CHANGE]: () => {\n      // emit(EVENTS.RESULT, {\n      //  cssClass:[]\n      // });\n    },\n    [EVENTS.CLEAR]: () => {\n      emit(EVENTS.RESULT, {\n        cssClass:[]\n      });\n    },\n  });\n\n  return storyFn();\n};\n","/**\n * A decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators\n * in order to augment stories:\n * - with extra rendering\n * - gather details about how a story is rendered\n *\n * When writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n *\n * https://storybook.js.org/docs/react/writing-stories/decorators\n */\nimport type { Renderer, ProjectAnnotations } from \"@storybook/types\";\nimport { PARAM_KEY } from \"./constants\";\nimport { withGlobals } from \"./withGlobals\";\nimport { withRoundTrip } from \"./withRoundTrip\";\n\n/**\n * Note: if you want to use JSX in this file, rename it to `preview.tsx`\n * and update the entry prop in tsup.config.ts to use \"src/preview.tsx\",\n */\n\nconst preview: ProjectAnnotations<Renderer> = {\n  decorators: [withGlobals, withRoundTrip],\n  globals: {\n    [PARAM_KEY]: false,\n  },\n};\n\nexport default preview;\n"]}