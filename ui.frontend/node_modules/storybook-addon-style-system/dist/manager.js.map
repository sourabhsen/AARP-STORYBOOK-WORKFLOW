{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Tool.tsx","../src/Panel.tsx","../src/components/PanelContent.tsx"],"names":["addons","types","ADDON_ID","TOOL_ID","PANEL_ID","TAB_ID","PARAM_KEY","EVENTS","React","memo","useCallback","useEffect","useGlobals","useStorybookApi","Icons","IconButton","Tool","globals","updateGlobals","api","isActive","toggleMyTool","useAddonState","useChannel","AddonPanel","useState","styled","Container","Select","PanelContent","results","fetchData","clearData","selectedStyle","setSelectedStyle","handleChange","event","detail","cssClass","index","useParameter","extractStyleClasses","obj","result","key","Panel","props","setState","emit","newResults","paramData","val","viewMode"],"mappings":"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","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, TOOL_ID, PANEL_ID, TAB_ID } from \"./constants\";\nimport { Tool } from \"./Tool\";\nimport { Panel } from \"./Panel\";\nimport { Tab } from \"./Tab\";\n\n/**\n * Note: if you want to use JSX in this file, rename it to `manager.tsx`\n * and update the entry prop in tsup.config.ts to use \"src/manager.tsx\",\n */\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    title: \"Style-System\",\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: Tool,\n  });\n\n  // Register the panel\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: \"Style-System\",\n    match: ({ viewMode }) => viewMode === \"story\",\n    render: Panel,\n  });\n\n});\n","export const ADDON_ID = \"storybook/style-system\";\nexport const TOOL_ID = `${ADDON_ID}/tool`;\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const TAB_ID = `${ADDON_ID}/tab`;\nexport const PARAM_KEY = `myAddonParameter`;\n\nexport const EVENTS = {\n  RESULT: `${ADDON_ID}/result`,\n  REQUEST: `${ADDON_ID}/request`,\n  CLEAR: `${ADDON_ID}/clear`,\n  CHANGE: `${ADDON_ID}/change`,\n};\n","import React, { memo, useCallback, useEffect } from \"react\";\nimport { useGlobals, useStorybookApi } from \"@storybook/manager-api\";\nimport { Icons, IconButton } from \"@storybook/components\";\nimport { ADDON_ID, PARAM_KEY, TOOL_ID } from \"./constants\";\n\nexport const Tool = memo(function MyAddonSelector() {\n  const [globals, updateGlobals] = useGlobals();\n  const api = useStorybookApi();\n\n  const isActive = [true, \"true\"].includes(globals[PARAM_KEY]);\n\n  const toggleMyTool = useCallback(() => {\n    updateGlobals({\n      [PARAM_KEY]: !isActive,\n    });\n  }, [isActive]);\n\n  useEffect(() => {\n    api.setAddonShortcut(ADDON_ID, {\n      label: \"Toggle Measure [O]\",\n      defaultShortcut: [\"O\"],\n      actionName: \"outline\",\n      showInMenu: false,\n      action: toggleMyTool,\n    });\n  }, [toggleMyTool, api]);\n\n  return (\n    <IconButton\n      key={TOOL_ID}\n      active={isActive}\n      title=\"Enable my addon\"\n      onClick={toggleMyTool}\n    >\n      <Icons icon=\"lightning\" />\n    </IconButton>\n  );\n});\n","import React, { useEffect } from \"react\";\nimport { useAddonState, useChannel } from \"@storybook/manager-api\";\nimport { AddonPanel } from \"@storybook/components\";\nimport { ADDON_ID, EVENTS, PARAM_KEY } from \"./constants\";\nimport { PanelContent } from \"./components/PanelContent\";\nimport { useParameter } from \"@storybook/manager-api\";\n\ninterface PanelProps {\n  active: boolean;\n}\n\n// Function to recursively extract cq:styleClasses values from JSON\nfunction extractStyleClasses(obj: any, result: any = []) {\n  for (const key in obj) {\n      if (key === 'cq:styleClasses') {\n          result.push(obj[key]);\n      } else if (typeof obj[key] === 'object') {\n          extractStyleClasses(obj[key], result);\n      }\n  }\n  return result;\n}\n\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  // https://storybook.js.org/docs/react/addons/addons-api#useaddonstate\n  const [results, setState] = useAddonState(ADDON_ID, {\n    cssClass: []\n  });\n\n  // https://storybook.js.org/docs/react/addons/addons-api#usechannel\n  const emit = useChannel({\n    [EVENTS.RESULT]: (newResults) => setState(newResults),\n  });\n\n  const paramData = useParameter<any>(PARAM_KEY, \"\");\n\n  useEffect(() => {\n    if(paramData) {\n       console.log('paramData--22', paramData);\n       const val = extractStyleClasses(paramData.policy);\n       emit(EVENTS.RESULT, {\n        cssClass: val\n      })\n    }\n  }, [paramData])\n\n  return (\n    <AddonPanel {...props}>\n      <PanelContent\n        results={results}\n        fetchData={() => {\n          emit(EVENTS.REQUEST);\n        }}\n        clearData={() => {\n          emit(EVENTS.CLEAR);\n        }}\n      />\n    </AddonPanel>\n  );\n};\n","import React, { useState } from \"react\";\nimport { styled, themes, convert } from \"@storybook/theming\";\nimport { TabsState, Placeholder, Button, Div } from \"@storybook/components\";\nimport { ADDON_ID, EVENTS, PARAM_KEY } from \"../constants\";\nimport { addons } from '@storybook/addons';\nimport { useParameter } from \"@storybook/manager-api\";\nimport { List } from \"./List\";\n\nexport const Container = styled.div`\n  padding: 10px;\n`;\n\nconst Select = styled.select`\n  padding: 5px;\n  margin-right: 10px;\n`;\n\n\ntype Results = {\n  cssClass: any[];\n};\n\ninterface PanelContentProps {\n  results: Results;\n  fetchData: () => void;\n  clearData: () => void;\n}\n\n/**\n * Checkout https://github.com/storybookjs/storybook/blob/next/code/addons/jest/src/components/Panel.tsx\n * for a real world example\n */\nexport const PanelContent: React.FC<PanelContentProps> = ({\n  results,\n  fetchData,\n  clearData,\n}) => {\n\n  const [selectedStyle, setSelectedStyle] = useState('');\n\n  const handleChange = (event: any) => {\n    const selectedStyle = event.target.value;\n    console.log('selectedStyle', selectedStyle);\n    setSelectedStyle(selectedStyle);\n\n    // Emit an event to notify that the selected style has changed\n    addons.getChannel().emit(EVENTS.CHANGE, { selectedStyle });\n  };\n\n  window.addEventListener('message', (detail: any) => {\n    // console.log('inside panel',detail);\n  });\n\n  return (\n    <>\n      <Container>\n        <Select value={selectedStyle} onChange={handleChange}>\n          <option value=\"\">Select a style</option>\n          {/* Mapping over the results.cssClass array to create option tags */}\n          {results?.cssClass?.length > 0 && results?.cssClass.map((cssClass, index) => (\n            <option key={index} value={cssClass}>{cssClass}</option>\n          ))}\n        </Select>\n      </Container>\n    </>\n\n  );\n}\n"]}